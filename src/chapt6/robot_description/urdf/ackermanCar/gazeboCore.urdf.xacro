<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">
    <!-- GAZEBO COLOUR -->
    <!-- Gazebo is unable to use the same <material> tags that are already in the URDF (that RViz
    uses). -->
    <!-- Instead, we need to add gazebo tags for our links that refer to Gazebo materials -->
    <gazebo reference="chassis_link">
        <material>Gazebo/White</material>
        <mu1>0.5</mu1>      <!-- 静摩擦系数 -->
                            <!-- 描述了一个物体在开始运动之前可以承受的最大摩擦力。静摩擦系数的值通常大于动摩擦系数，这意味着开始移动一个物体比保持其运动需要更多的力 -->
        <mu2>0.5</mu2>      <!-- 动摩擦系数 -->
                            <!-- 描述了一个物体在运动过程中受到的摩擦力。动摩擦系数决定了物体在持续运动状态下的摩擦阻力 -->
    </gazebo>
    <gazebo reference="fr_left_wheel_link">
        <material>Gazebo/Grey</material>
        <mu1>150.0</mu1>
        <mu2>10.0</mu2>
    </gazebo>
    <gazebo reference="fr_right_wheel_link">
        <material>Gazebo/Grey</material>
        <mu1>150.0</mu1>
        <mu2>10.0</mu2>
    </gazebo>
    <gazebo reference="re_left_wheel_link">
        <material>Gazebo/Grey</material>
        <mu1>150.0</mu1>
        <mu2>10.0</mu2>
    </gazebo>
    <gazebo reference="re_right_wheel_link">
        <material>Gazebo/Grey</material>
        <mu1>150.0</mu1>
        <mu2>10.0</mu2>
    </gazebo>
    <gazebo reference="virtual_steer_link">             <!-- 方向盘转向link -->
        <material>Gazebo/Yellow</material>
    </gazebo>

    <!-- LASER -->
    <gazebo reference="laser_link">
        <material>Gazebo/Black</material>
        <mu1>1.0</mu1>
        <mu2>1.0</mu2>
    </gazebo>

    <gazebo reference="laser_link">                     <!-- 指定这个传感器附加到的链接（link）名称 -->
      <sensor name="laser_sensor" type="ray">           <!-- 为传感器定义一个名称 并 指定传感器类型为射线（ray），即激光传感器 -->
      <always_on>true</always_on>                       <!-- 表示传感器始终处于开启状态 -->
      <visualize>true</visualize>                       <!-- 表示在Gazebo的图形界面中可视化传感器的输出 -->
      <update_rate>50</update_rate>                     <!-- 定义传感器的更新频率 -->
      <pose>0 0 0.2 0 0 0</pose>                <!-- 定义传感器相对于其附着链接的位姿（位置和方向）。这里的位姿是（0, 0, 0.2）的平移和（0, 0, 0）的旋转（以弧度为单位） -->
      <ray>
          <scan>
            <horizontal>                                <!-- 指定水平方向的扫描参数 -->
              <samples>360</samples>                    <!-- 水平方向上的样本数量，这里是360，意味着覆盖360度 -->
              <resolution>1.000000</resolution>         <!-- 每个样本之间的分辨率，这里设置为1度 -->
              <min_angle>0.000000</min_angle>           <!-- 水平扫描的最小角度，这里是0度 -->
              <max_angle>6.280000</max_angle>           <!-- 水平扫描的最大角度，这里是6.28弧度（相当于360度） -->
            </horizontal>
          </scan>
          <range>                                       <!-- 定义激光传感器的测量范围 -->
            <min>0.5</min>                         <!-- 可检测的最小距离，这里是0.12米 -->
            <max>10.5</max>
            <resolution>0.015000</resolution>           <!-- 测量分辨率，这里是0.015米 -->
          </range>
          <noise>                                       <!-- 定义传感器测量中的噪声 -->
            <type>gaussian</type>                       <!-- 噪声类型为高斯分布 -->
            <mean>0.0</mean>                            <!-- 噪声的均值 -->
            <stddev>0.01</stddev>                       <!-- 噪声的标准差 -->
          </noise>
      </ray>

      <plugin name="laserscan" filename="libgazebo_ros_ray_sensor.so">                  <!-- 定义用于发布传感器数据的插件 -->
        <ros>                                           <!-- 定义ROS相关的参数 -->
          
          <remapping>~/out:=scan</remapping>            <!-- 将插件发布的主题重命名为scan -->
        </ros>
        <output_type>sensor_msgs/LaserScan</output_type>        <!-- 定义雷达输出消息类型为sensor_msgs/LaserScan，这是ROS中用于激光扫描的标准消息类型 -->
        <frame_name>laser_link</frame_name>             <!-- 定义输出激光扫描消息的参考坐标系名称 与定义的雷达link相同名字 -->
      </plugin>
      </sensor>
    </gazebo>



    <gazebo reference="imu_link">
        <material>Gazebo/Black</material>
        <mu1>1.0</mu1>
        <mu2>1.0</mu2>
    </gazebo>

    <gazebo reference="imu_link">
      <sensor name="imu_sensor" type="imu">
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
          <ros>
            <namespace>/</namespace>
            <remapping>~/out:=imu</remapping>
          </ros>
          <initial_orientation_as_reference>false</initial_orientation_as_reference>
        </plugin>
        <always_on>true</always_on>
        <update_rate>100</update_rate>
        <visualize>true</visualize>
        <imu>
          <angular_velocity>
            <x>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
                <bias_mean>0.0000075</bias_mean>
                <bias_stddev>0.0000008</bias_stddev>
              </noise>
            </x>
            <y>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
                <bias_mean>0.0000075</bias_mean>
                <bias_stddev>0.0000008</bias_stddev>
              </noise>
            </y>
            <z>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
                <bias_mean>0.0000075</bias_mean>
                <bias_stddev>0.0000008</bias_stddev>
              </noise>
            </z>
          </angular_velocity>
          <linear_acceleration>
            <x>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
                <bias_mean>0.1</bias_mean>
                <bias_stddev>0.001</bias_stddev>
              </noise>
            </x>
            <y>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
                <bias_mean>0.1</bias_mean>
                <bias_stddev>0.001</bias_stddev>
              </noise>
            </y>
            <z>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
                <bias_mean>0.1</bias_mean>
                <bias_stddev>0.001</bias_stddev>
              </noise>
            </z>
          </linear_acceleration>
        </imu>
      </sensor>
    </gazebo>



    <!-- JOINT STATE PUBLISHER -->
    <!-- Gazebo requires the use of plugins to interact with other systems such as ROS. -->
    <!-- This plugin will publish the joint_states for the selected joints 
            (which robot_state_publisher can then use to broadcast the approprate tf). 
         Using Gazebo ROS2 control plugin (ros2_control) (part of ROS2 control system) publishing and
    control of joint.-->
    <gazebo>
        <plugin name="gazebo_ros_joint_state_publisher"
            filename="libgazebo_ros_joint_state_publisher.so">      <!-- 定义了插件的名称和共享库文件的路径 -->
            <update_rate>100</update_rate>                          <!-- 设置了关节状态发布的频率，这里是每秒100次 -->
            <joint_name>fr_right_steer_joint</joint_name>           <!--<joint_name>...</joint_name>: 这些行列出了需要发布状态的关节名称。插件将为这些关节发布状态信息-->
            <joint_name>fr_right_wheel_joint</joint_name>
            <joint_name>fr_left_steer_joint</joint_name>
            <joint_name>fr_left_wheel_joint</joint_name>
            <joint_name>re_right_wheel_joint</joint_name>
            <joint_name>re_left_wheel_joint</joint_name>
            <joint_name>virtual_steering_wheel_joint</joint_name>
        </plugin>
    </gazebo>

    <!-- This plugin will read a JointTrajectory message from the /set_joint_trajectory topic 
            and move the machine accordingly. It's a bit clunky but it works. -->
    <!-- You'll probably want to add damping to the joints to stop them it flopping around. 
            e.g. <dynamics damping="10.0" friction="10.0"/> -->
    <!-- Here's an example message to publish to test it:
            ros2 topic pub -1 /set_joint_trajectory trajectory_msgs/msg/JointTrajectory  '{header: {frame_id:
    world}, joint_names: [slider_joint, arm_joint], points: [  {positions: {0.8,0.6}} ]}' -->
    <gazebo>
        <plugin name="gazebo_ros_joint_pose_trajectory"
            filename="libgazebo_ros_joint_pose_trajectory.so">      <!--这个插件用于读取来自/set_joint_trajectory主题的JointTrajectory消息，并相应地移动机器人的关节-->
            <update_rate>2</update_rate>
        </plugin>
    </gazebo>


    <!-- ACKERMANN DRIVE PLUGIN -->
    <gazebo>
        <plugin name='gazebo_ackermann_drive' filename='libgazebo_ros_ackermann_drive.so'>
            <ros>
                <!-- <namespace>ugv_gazebo_ackermann</namespace> -->
                <remapping>cmd_vel:=cmd_vel</remapping>             <!-- 速度接受器话题 -->
                <remapping>odom:=odom</remapping>                   <!-- 里程计发布话题 -->
                <remapping>distance:=distance</remapping>           <!-- 里程计距离发布话题，单位m -->
            </ros>

            <update_rate>100.0</update_rate>                        <!-- 设置插件更新频率为100Hz。也就是/cmd_vel和/odom的订阅和发布频率 -->

            <!-- wheels -->
            <front_left_joint>fr_left_wheel_joint</front_left_joint>
            <front_right_joint>fr_right_wheel_joint</front_right_joint>
            <rear_left_joint>re_left_wheel_joint</rear_left_joint>
            <rear_right_joint>re_right_wheel_joint</rear_right_joint>
            <left_steering_joint>fr_left_steer_joint</left_steering_joint>
            <right_steering_joint>fr_right_steer_joint</right_steering_joint>
            <steering_wheel_joint>virtual_steering_wheel_joint</steering_wheel_joint>

            <!-- Max absolute steer angle for tyre in radians-->
            <!-- Any cmd_vel angular z greater than this would be capped -->
            <max_steer>0.383972</max_steer>                     <!-- 设置轮胎的最大转向角度（弧度），任何超出此值的cmd_vel角速度将被限制 -->

            <!-- Max absolute steering angle of steering wheel -->
            <max_steering_angle>1.570796</max_steering_angle>   <!-- 设置转向盘的最大转向角度（弧度） -->

            <!-- Max absolute linear speed in m/s -->
            <max_speed>5</max_speed>                            <!-- 设置车辆的最大线速度（米/秒） -->

            <!-- PID tuning -->
            <left_steering_pid_gain>1500 0 1</left_steering_pid_gain>
            <left_steering_i_range>0 0</left_steering_i_range>
            <right_steering_pid_gain>1500 0 1</right_steering_pid_gain>
            <right_steering_i_range>0 0</right_steering_i_range>
            <linear_velocity_pid_gain>1500 0 1</linear_velocity_pid_gain>
            <linear_velocity_i_range>0 0</linear_velocity_i_range>

            <!-- output -->
            <publish_odom>true</publish_odom>
            <publish_odom_tf>true</publish_odom_tf>     <!-- Don't pubslish this when using robot
            localization -->
            <publish_wheel_tf>false</publish_wheel_tf>  <!-- Don't publish this. It will override all
            wheel frames to robot_base_frame parameter below.-->
            <publish_distance>true</publish_distance>

            <odometry_frame>odom</odometry_frame>
            <robot_base_frame>base_footprint</robot_base_frame>         <!-- 设置机器人的基础坐标系 -->

        </plugin>
    </gazebo>

    <!-- Virtual Steering wheel 方向盘link -->
    <link name="virtual_steer_link">
        <visual>
            <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0" />
            <geometry>
                <box size="0.01 0.15 0.075" />
            </geometry>
            <material name="">
                <color rgba="1.0 1.0 0.0 1" />
            </material>
        </visual>
        <inertial>  <!-- Gazebo won't show this link without this inertial mass -->
            <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0" />
            <mass value="0.001" />
            <inertia ixx="0.0" ixy="0.0" ixz="0.0" iyy="0.0" iyz="0.0" izz="0.0" />
        </inertial>
    </link>
    <joint name="virtual_steering_wheel_joint" type="revolute">
        <origin xyz="-0.32 0.0 0.0" rpy="0.0 0.0 0.0" />
        <parent link="chassis_link" />
        <child link="virtual_steer_link" />
        <axis xyz="-1 0 0" />
        <limit lower="-3" upper="3" effort="200" velocity="20" />
    </joint>

</robot>
